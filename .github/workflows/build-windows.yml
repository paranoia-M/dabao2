# .github/workflows/build-windows.yml

# 工作流的名称，会显示在 GitHub Actions 页面
name: Build Digital Twin System for Windows

# 触发工作流的事件
on:
  # 1. 当有代码推送到 main 分支时自动触发
  push:
    branches: [ "main" ]
  # 2. 允许在 GitHub Actions 页面手动触发
  workflow_dispatch:

jobs:
  # 定义一个名为 "build-app" 的作业
  build-app:
    # 指定运行环境为最新的 Windows
    runs-on: windows-latest

    steps:
      # 步骤 1: 检出代码
      # 从你的仓库把代码下载到工作流的虚拟机上
      - name: Check out repository code
        uses: actions/checkout@v4

      # 步骤 2: 设置 Python 环境
      # 我们指定使用 Python 3.9，与您的本地环境保持一致
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 步骤 3: 安装所有依赖项
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # 使用 requirements.txt 文件一次性安装所有需要的库
          pip install -r requirements.txt

      # 步骤 4: 动态查找 PyVista 的安装路径
      # 这是一个健壮的做法，避免因环境变化导致路径写死而失败
      - name: Find PyVista Path
        id: find_paths # 为这个步骤设置一个ID，方便后续引用
        run: |
          # 运行Python脚本找到 pyvista 的核心文件路径
          $PYVISTA_NDARRAY_PATH = python -c "import os, pyvista; print(os.path.join(os.path.dirname(pyvista.__file__), 'core', 'pyvista_ndarray.py'))"
          # 将找到的路径作为输出变量
          echo "pyvista_ndarray_path=$PYVISTA_NDARRAY_PATH" >> $env:GITHUB_OUTPUT
        shell: pwsh # 使用 PowerShell

      # 步骤 5: 使用 PyInstaller 打包应用程序
      - name: Build executable with PyInstaller
        run: |
          # 使用上一步找到的动态路径
          $NDARRAY_PATH = "${{ steps.find_paths.outputs.pyvista_ndarray_path }}"
          
          echo "Using PyVista ndarray path: $NDARRAY_PATH"

          # 完整的打包命令，包含了所有针对 PyVista 和 VTK 的特殊指令
          pyinstaller --onefile --windowed `
            --name="DigitalTwinSystem" `
            --icon="assets/icon.ico" `
            --add-data="$NDARRAY_PATH;pyvista/core" `
            --hidden-import="pyvista.core.errors" `
            --hidden-import="vtkmodules.all" `
            --hidden-import="vtkmodules.qt.QVTKRenderWindowInteractor" `
            main.py
        shell: pwsh # 使用 PowerShell

      # 步骤 6: 上传构建好的 .exe 文件
      # 将 dist 目录下的 .exe 文件打包成一个 zip，并上传到 GitHub Actions 的产物中
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          # 上传后的产物名称
          name: Digital-Twin-System-Windows-Release
          # 要上传的文件的路径
          path: dist/DigitalTwinSystem.exe